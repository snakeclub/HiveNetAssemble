/* ********************************
* Copyright 2022 黎慧剑
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* 说明：
* 本文件用于定义HiveNetGRpc的通用消息结构
* 安装包后需执行一次当前目录的 proto_generate.py 生成消息结果代码
* 编译命令：python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. msg_bytes.proto
* 编译完成后，修改msg_bytes_pb2_grpc.py文件，增加上库路径指定和msg_bytes_pb2对象引入
* import sys
* import os
* # 根据当前文件路径将包路径纳入，在非安装的情况下可以引用到
* sys.path.append(os.path.abspath(os.path.join(
*     os.path.dirname(__file__), os.path.pardir, os.path.pardir)))
* import HiveNetGRpc.proto.msg_bytes_pb2 as msg__bytes__pb2
*
* 安装编译包方法：
* 1、pip install grpcio-tools
* 2、pip install googleapis-common-protos
*
* 如果安装中有报错，可能是setuptools或pip的版本过低导致，使用以下方法升级后再安装：
* 1、pip3 list，找到setuptools的版本，例如：setuptools               28.8.0
* 2、pip3 uninstall setuptools==28.8.0
* 3、pip3 install  setuptools
* 4、pip install --upgrade pip
******************************** */
syntax = "proto3";

package HiveNetGRPC;

// 服务名可按需要修改为不同的服务名(注意同一个包中的服务名不要重复)
// rpc名请保证跟示例保持一致
service BytesService {
 rpc GRpcCallSimple (RpcRequest) returns (RpcResponse){};  // 简单调用
 rpc GRpcCallClientSideStream (stream RpcRequest) returns (RpcResponse){};  // 客户端流式
 rpc GRpcCallServerSideStream (RpcRequest) returns (stream RpcResponse){};  // 服务端流式
 rpc GRpcCallBidirectionalStream (stream RpcRequest) returns (stream RpcResponse){};  // 双向数据流模式
 rpc GRpcCallHealthCheck (HealthRequest) returns (HealthResponse){}; // 健康检查
}

// 请求消息结构, 注意uri为固定的送入参数
message RpcRequest {
  // 执行远程函数信息
  bytes para_bytes = 1;  // 要传输的字节数组
}

// 响应消息结构
message RpcResponse {
  bytes return_bytes = 1;  // 函数执行返回字节数组

  // 执行异常会抛出的信息
  string call_code = 2;  // 执行错误码:'00000'-成功,'11403'-服务名不存在,'21007'-执行抛出异常
  string call_msg = 3;  //执行错误信息
  string call_error = 4;  //如果出现异常时的错误类型
  string call_msg_para = 5; //执行错误信息对应的参数，JSON格式，数组()
}

// 自定义健康检查的服务
message HealthRequest {
  string service = 1; // 健康监控请求
}

message HealthResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  ServingStatus status = 1;
}
