import sys
import os
sys.path.append(os.path.abspath(os.path.join(
    os.path.dirname(__file__), os.path.pardir, os.path.pardir)))

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import HiveNetGRpc.proto.msg_bytes_pb2 as msg__bytes__pb2


class BytesServiceStub(object):
    """服务名可按需要修改为不同的服务名(注意同一个包中的服务名不要重复)
    rpc名请保证跟示例保持一致
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GRpcCallSimple = channel.unary_unary(
                '/HiveNetGRPC.BytesService/GRpcCallSimple',
                request_serializer=msg__bytes__pb2.RpcRequest.SerializeToString,
                response_deserializer=msg__bytes__pb2.RpcResponse.FromString,
                )
        self.GRpcCallClientSideStream = channel.stream_unary(
                '/HiveNetGRPC.BytesService/GRpcCallClientSideStream',
                request_serializer=msg__bytes__pb2.RpcRequest.SerializeToString,
                response_deserializer=msg__bytes__pb2.RpcResponse.FromString,
                )
        self.GRpcCallServerSideStream = channel.unary_stream(
                '/HiveNetGRPC.BytesService/GRpcCallServerSideStream',
                request_serializer=msg__bytes__pb2.RpcRequest.SerializeToString,
                response_deserializer=msg__bytes__pb2.RpcResponse.FromString,
                )
        self.GRpcCallBidirectionalStream = channel.stream_stream(
                '/HiveNetGRPC.BytesService/GRpcCallBidirectionalStream',
                request_serializer=msg__bytes__pb2.RpcRequest.SerializeToString,
                response_deserializer=msg__bytes__pb2.RpcResponse.FromString,
                )
        self.GRpcCallHealthCheck = channel.unary_unary(
                '/HiveNetGRPC.BytesService/GRpcCallHealthCheck',
                request_serializer=msg__bytes__pb2.HealthRequest.SerializeToString,
                response_deserializer=msg__bytes__pb2.HealthResponse.FromString,
                )


class BytesServiceServicer(object):
    """服务名可按需要修改为不同的服务名(注意同一个包中的服务名不要重复)
    rpc名请保证跟示例保持一致
    """

    def GRpcCallSimple(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GRpcCallClientSideStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GRpcCallServerSideStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GRpcCallBidirectionalStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GRpcCallHealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BytesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GRpcCallSimple': grpc.unary_unary_rpc_method_handler(
                    servicer.GRpcCallSimple,
                    request_deserializer=msg__bytes__pb2.RpcRequest.FromString,
                    response_serializer=msg__bytes__pb2.RpcResponse.SerializeToString,
            ),
            'GRpcCallClientSideStream': grpc.stream_unary_rpc_method_handler(
                    servicer.GRpcCallClientSideStream,
                    request_deserializer=msg__bytes__pb2.RpcRequest.FromString,
                    response_serializer=msg__bytes__pb2.RpcResponse.SerializeToString,
            ),
            'GRpcCallServerSideStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GRpcCallServerSideStream,
                    request_deserializer=msg__bytes__pb2.RpcRequest.FromString,
                    response_serializer=msg__bytes__pb2.RpcResponse.SerializeToString,
            ),
            'GRpcCallBidirectionalStream': grpc.stream_stream_rpc_method_handler(
                    servicer.GRpcCallBidirectionalStream,
                    request_deserializer=msg__bytes__pb2.RpcRequest.FromString,
                    response_serializer=msg__bytes__pb2.RpcResponse.SerializeToString,
            ),
            'GRpcCallHealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.GRpcCallHealthCheck,
                    request_deserializer=msg__bytes__pb2.HealthRequest.FromString,
                    response_serializer=msg__bytes__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HiveNetGRPC.BytesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BytesService(object):
    """服务名可按需要修改为不同的服务名(注意同一个包中的服务名不要重复)
    rpc名请保证跟示例保持一致
    """

    @staticmethod
    def GRpcCallSimple(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HiveNetGRPC.BytesService/GRpcCallSimple',
            msg__bytes__pb2.RpcRequest.SerializeToString,
            msg__bytes__pb2.RpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GRpcCallClientSideStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/HiveNetGRPC.BytesService/GRpcCallClientSideStream',
            msg__bytes__pb2.RpcRequest.SerializeToString,
            msg__bytes__pb2.RpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GRpcCallServerSideStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/HiveNetGRPC.BytesService/GRpcCallServerSideStream',
            msg__bytes__pb2.RpcRequest.SerializeToString,
            msg__bytes__pb2.RpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GRpcCallBidirectionalStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/HiveNetGRPC.BytesService/GRpcCallBidirectionalStream',
            msg__bytes__pb2.RpcRequest.SerializeToString,
            msg__bytes__pb2.RpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GRpcCallHealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HiveNetGRPC.BytesService/GRpcCallHealthCheck',
            msg__bytes__pb2.HealthRequest.SerializeToString,
            msg__bytes__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
